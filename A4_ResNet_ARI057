###fine tune resnet model to classify dogs and cats 

import tensorflow as tf
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from PIL import Image
import scipy


from google.colab import drive
drive.mount('/content/drive')

HEIGHT, WIDTH = 224, 224
NUM_CLASSES = 2  # "cat" and "dog"

# Create a ResNet50-based model
def create_model():
    base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(HEIGHT, WIDTH, 3))
    x = base_model.output
    x = GlobalAveragePooling2D()(x)
    x = Dense(1024, activation='relu')(x)
    x = Dense(128, activation='relu')(x)  # Add an additional Dense layer
    x = Dense(64, activation='relu')(x)   # Add another Dense layer
    predictions = Dense(NUM_CLASSES, activation='softmax')(x)
    model = Model(inputs=base_model.input, outputs=predictions)
    return model

# Create the model
model =create_model()

# Freeze pre-trained layers
for layer in model.layers:
    layer.trainable = False

# Compile the model
model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])


# Data augmentation and preprocessing
train_datagen = ImageDataGenerator(
    rescale=1.0 / 255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True,
    validation_split=0.2
)

train_data_dir = '/content/drive/MyDrive/CatvsDogs


# Create data generators
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(HEIGHT, WIDTH),
    batch_size=32,
    class_mode='categorical',
    subset='training',
)

validation_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(HEIGHT, WIDTH),
    batch_size=32,
    class_mode='categorical',
    subset='validation'
)

# Train the model
history=model.fit(
    train_generator,
    steps_per_epoch=len(train_generator),
    validation_data=validation_generator,
    validation_steps=len(validation_generator),
    epochs=10  # You can adjust the number of epochs
)

import matplotlib.pyplot as plt
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))



plt.plot(epochs, loss, 'r', label='Training Loss')
plt.plot(epochs, val_loss, 'b', label='Validation Loss')
plt.title('Training and Validation Loss')


plt.legend()
plt.show()
